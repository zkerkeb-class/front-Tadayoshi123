import type { DashboardLayout } from "@/lib/types/dashboard"
import { availableTemplates, getDashboardTemplate } from "@/lib/dashboard/dashboard-templates"

class DashboardManager {
  private storageKey = "supervia-dashboards"

  // Get all dashboards
  getDashboards(): DashboardLayout[] {
    if (typeof window === "undefined") return []

    try {
      const stored = localStorage.getItem(this.storageKey)
      return stored ? JSON.parse(stored) : []
    } catch {
      return []
    }
  }

  // Get dashboard by ID
  getDashboard(id: string): DashboardLayout | null {
    const dashboards = this.getDashboards()
    return dashboards.find((d) => d.id === id) || null
  }

  // Save dashboard
  saveDashboard(dashboard: DashboardLayout): void {
    const dashboards = this.getDashboards()
    const existingIndex = dashboards.findIndex((d) => d.id === dashboard.id)

    const updatedDashboard = {
      ...dashboard,
      updatedAt: new Date().toISOString(),
      metadata: {
        ...dashboard.metadata,
        updatedAt: new Date().toISOString(),
        tags: dashboard.metadata?.tags || dashboard.tags || [],
      },
    }

    if (existingIndex >= 0) {
      dashboards[existingIndex] = updatedDashboard
    } else {
      dashboards.push(updatedDashboard)
    }

    localStorage.setItem(this.storageKey, JSON.stringify(dashboards))
  }

  // Delete dashboard
  deleteDashboard(id: string): void {
    const dashboards = this.getDashboards()
    const filtered = dashboards.filter((d) => d.id !== id)
    localStorage.setItem(this.storageKey, JSON.stringify(filtered))
  }

  // Create dashboard from template
  createFromTemplate(templateId: string, name?: string): DashboardLayout {
    const template = getDashboardTemplate(templateId)
    if (!template) {
      throw new Error("Template not found")
    }

    const dashboard: DashboardLayout = {
      id: `dashboard-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      name: name || `${template.name} - Copy`,
      description: template.description,
      category: template.category,
      blocks: template.blocks.map((block) => ({
        ...block,
        id: `block-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      })),
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      tags: template.tags || [],
      metadata: {
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        tags: template.tags || [],
      },
      gridConfig: template.gridConfig,
    }

    this.saveDashboard(dashboard)
    return dashboard
  }

  // Import dashboard from JSON
  importDashboard(dashboardJson: string): DashboardLayout {
    try {
      const dashboard = JSON.parse(dashboardJson) as DashboardLayout

      // Generate new ID to avoid conflicts
      dashboard.id = `dashboard-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`
      dashboard.createdAt = new Date().toISOString()
      dashboard.updatedAt = new Date().toISOString()
      
      if (!dashboard.metadata) {
        dashboard.metadata = {
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString(),
          tags: dashboard.tags || [],
        }
      }

      this.saveDashboard(dashboard)
      return dashboard
    } catch {
      throw new Error("Invalid dashboard JSON format")
    }
  }

  // Export dashboard to JSON
  exportDashboard(id: string): string {
    const dashboard = this.getDashboard(id)
    if (!dashboard) {
      throw new Error("Dashboard not found")
    }
    return JSON.stringify(dashboard, null, 2)
  }

  // Create dashboard from AI output
  createFromAI(aiOutput: Record<string, unknown>, name?: string): DashboardLayout {
    // This would parse AI-generated JSON and convert it to our dashboard format
    const dashboard: DashboardLayout = {
      id: `dashboard-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      name: name || (aiOutput.name as string) || "AI Generated Dashboard",
      description: (aiOutput.description as string) || "Generated by AI",
      blocks: (aiOutput.blocks as DashboardLayout['blocks']) || [],
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      tags: (aiOutput.tags as string[]) || ["ai-generated"],
      metadata: {
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        tags: (aiOutput.tags as string[]) || ["ai-generated"],
      },
      gridConfig: {
        cols: 12,
        rowHeight: 80,
        gap: 16,
        compactType: "vertical",
      },
    }

    this.saveDashboard(dashboard)
    return dashboard
  }
}

export const dashboardManager = new DashboardManager()
